{"ast":null,"code":"import _slicedToArray from \"/home/oberon/Desktop/reactProject/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/oberon/Desktop/reactProject/src/components/Board/Board.js\";\nimport React from 'react';\nimport Square from '../Square/Square';\nimport './Board.css';\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(null),\n      xIsNext: true\n    };\n  } //by Mouse click on Square component\n\n\n  handleClick(i) {\n    //create copy of the squares array\n    const squares = this.state.squares.slice();\n\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    } //assigne the xIsNext actual value to [i]- ellement of coppied array \n\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O'; //renew the state\n\n    this.setState({\n      squares,\n      xIsNext: !this.state.xIsNext\n    });\n  } //rendering Square component\n\n\n  renderSquare(i) {\n    return React.createElement(Square, {\n      value: this.state.squares[i],\n      onClick: () => this.handleClick(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    });\n  }\n\n  render() {\n    const winner = calculateWinner(this.state.squares);\n    let status;\n\n    if (winner) {\n      status = \"Winner \" + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, status), React.createElement(\"div\", {\n      className: \"board-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, this.renderSquare(0), this.renderSquare(1), this.renderSquare(2)), React.createElement(\"div\", {\n      className: \"board-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, this.renderSquare(3), this.renderSquare(4), this.renderSquare(5)), React.createElement(\"div\", {\n      className: \"board-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, this.renderSquare(6), this.renderSquare(7), this.renderSquare(8)));\n  }\n\n}\n\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i++) {\n    const _lines$i = _slicedToArray(lines[i], 3),\n          a = _lines$i[0],\n          b = _lines$i[1],\n          c = _lines$i[2];\n\n    if (squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n}\n\nexport default Board;","map":{"version":3,"sources":["/home/oberon/Desktop/reactProject/src/components/Board/Board.js"],"names":["React","Square","Board","Component","constructor","props","state","squares","Array","fill","xIsNext","handleClick","i","slice","calculateWinner","setState","renderSquare","render","winner","status","lines","length","a","b","c"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAO,aAAP;;AAEA,MAAMC,KAAN,SAAoBF,KAAK,CAACG,SAA1B,CAAoC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAEC,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CADA;AAETC,MAAAA,OAAO,EAAE;AAFA,KAAb;AAIH,GAR+B,CAUhC;;;AACAC,EAAAA,WAAW,CAACC,CAAD,EAAI;AACX;AACA,UAAML,OAAO,GAAG,KAAKD,KAAL,CAAWC,OAAX,CAAmBM,KAAnB,EAAhB;;AACA,QAAIC,eAAe,CAACP,OAAD,CAAf,IAA4BA,OAAO,CAACK,CAAD,CAAvC,EAA4C;AACxC;AACH,KALU,CAMX;;;AACAL,IAAAA,OAAO,CAACK,CAAD,CAAP,GAAa,KAAKN,KAAL,CAAWI,OAAX,GAAqB,GAArB,GAA2B,GAAxC,CAPW,CAQX;;AACA,SAAKK,QAAL,CAAc;AACER,MAAAA,OADF;AAEEG,MAAAA,OAAO,EAAE,CAAC,KAAKJ,KAAL,CAAWI;AAFvB,KAAd;AAIH,GAxB+B,CA0BhC;;;AACAM,EAAAA,YAAY,CAACJ,CAAD,EAAI;AACZ,WAAO,oBAAC,MAAD;AACK,MAAA,KAAK,EAAE,KAAKN,KAAL,CAAWC,OAAX,CAAmBK,CAAnB,CADZ;AAEK,MAAA,OAAO,EAAE,MAAM,KAAKD,WAAL,CAAiBC,CAAjB,CAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAIH;;AACDK,EAAAA,MAAM,GAAG;AACT,UAAMC,MAAM,GAAGJ,eAAe,CAAC,KAAKR,KAAL,CAAWC,OAAZ,CAA9B;AACA,QAAIY,MAAJ;;AACA,QAAID,MAAJ,EAAY;AACRC,MAAAA,MAAM,GAAG,YAAYD,MAArB;AACH,KAFD,MAES;AACLC,MAAAA,MAAM,GAAG,mBAAmB,KAAKb,KAAL,CAAWI,OAAX,GAAqB,GAArB,GAA2B,GAA9C,CAAT;AACH;;AAGG,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAyBS,MAAzB,CADJ,EAGI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKH,YAAL,CAAkB,CAAlB,CADL,EAEK,KAAKA,YAAL,CAAkB,CAAlB,CAFL,EAGK,KAAKA,YAAL,CAAkB,CAAlB,CAHL,CAHJ,EASI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKA,YAAL,CAAkB,CAAlB,CADL,EAEK,KAAKA,YAAL,CAAkB,CAAlB,CAFL,EAGK,KAAKA,YAAL,CAAkB,CAAlB,CAHL,CATJ,EAeI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKA,YAAL,CAAkB,CAAlB,CADL,EAEK,KAAKA,YAAL,CAAkB,CAAlB,CAFL,EAGK,KAAKA,YAAL,CAAkB,CAAlB,CAHL,CAfJ,CADJ;AAyBH;;AApE+B;;AAuEpC,SAASF,eAAT,CAAyBP,OAAzB,EAAkC;AAC9B,QAAMa,KAAK,GAAG,CACV,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADU,EAEV,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFU,EAGV,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHU,EAIV,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAJU,EAKV,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CALU,EAMV,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CANU,EAOV,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAPU,EAQV,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CARU,CAAd;;AAUA,OAAI,IAAIR,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGQ,KAAK,CAACC,MAAzB,EAAiCT,CAAC,EAAlC,EAAsC;AAAA,oCAChBQ,KAAK,CAACR,CAAD,CADW;AAAA,UAC3BU,CAD2B;AAAA,UACxBC,CADwB;AAAA,UACrBC,CADqB;;AAElC,QAAIjB,OAAO,CAACe,CAAD,CAAP,KAAef,OAAO,CAACgB,CAAD,CAAtB,IAA6BhB,OAAO,CAACe,CAAD,CAAP,KAAef,OAAO,CAACiB,CAAD,CAAvD,EAA4D;AACxD,aAAOjB,OAAO,CAACe,CAAD,CAAd;AACH;AACJ;;AACD,SAAO,IAAP;AACH;;AAED,eAAepB,KAAf","sourcesContent":["import React from 'react'\nimport Square from '../Square/Square'\nimport './Board.css'\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            squares: Array(9).fill(null),\n            xIsNext: true\n        }\n    }\n\n    //by Mouse click on Square component\n    handleClick(i) {\n        //create copy of the squares array\n        const squares = this.state.squares.slice()\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        //assigne the xIsNext actual value to [i]- ellement of coppied array \n        squares[i] = this.state.xIsNext ? 'X' : 'O'\n        //renew the state\n        this.setState({\n                        squares,\n                        xIsNext: !this.state.xIsNext})\n        \n    }\n\n    //rendering Square component\n    renderSquare(i) {\n        return <Square \n                    value={this.state.squares[i]}\n                    onClick={() => this.handleClick(i)}\n                />\n    }\n    render() {\n    const winner = calculateWinner(this.state.squares);\n    let status\n    if (winner) {\n        status = \"Winner \" + winner\n    }   else {\n        status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O')\n    }\n    \n\n        return(\n            <div>\n                <div className='status'>{status}</div>\n\n                <div className='board-row'>\n                    {this.renderSquare(0)}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                </div>\n\n                <div className='board-row'>\n                    {this.renderSquare(3)}\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                </div>\n\n                <div className='board-row'>\n                    {this.renderSquare(6)}\n                    {this.renderSquare(7)}\n                    {this.renderSquare(8)}\n                </div>\n\n            </div>\n        \n        )\n    }\n}\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ]\n    for(let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i]\n        if (squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a]\n        }\n    }\n    return null\n}\n\nexport default Board"]},"metadata":{},"sourceType":"module"}